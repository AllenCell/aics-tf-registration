################################################################################
# Input/Output Paths
################################################################################

# INPUTS #
# NOTE: source-target image pairs must be in different folders and have 
#       identical filenames. .tif, .tiff, and .ome.tiff files only

# Path to folder containing the low-resolution images to be aligned
source_path: ''
# Path to folder containing the high-res images to be aligned
target_path: ''
# The modality that has the smaller field of view (FOV). 
#     Options: 'source' or 'target'
smaller_fov_modality: 'source'

# OUTPUTS #
# NOTE: aligned source and target files will share the same name an will be 
#       placed into seperate folders labeled 'source' and 'target' within the
#       designated output folder

# Path to folder where successfully aligned image pairs will be saved
output_path: ''
# Option to save a composite of aligned image pairs for easy evaluation. If true
# results will be saved into a subfolder titled 'composite' within the output 
# folder
save_alignment_composite: True

################################################################################
# Preprocessing Options
################################################################################

# The upsampling/downsampling ratio needed to bring the smaller FOV image to the 
# same voxel dimensions as the larger FOV image in x and y
#     i.e [smaller FOV xy scale]/[larger FOV xy scale]
scale_factor_xy: 1.0
# The upsampling/downsampling ratio needed to bring the smaller FOV image to the 
# same voxel dimensions as the larger FOV image in z
#     i.e [smaller FOV z scale]/[larger FOV z scale]
scale_factor_z: 1.0
# Array of image transforms to be applied to the source image in order to match
# the orientation of the target image. List transforms in the order you wish to
# apply them.
# Options:
#     - 'flip_lr':  flip image horizontally
#     - 'flip_ud':  flip image vertically
#     - 'rotate_90':   rotate the image clockwise by 90 degrees
#     - 'rotate_180':  rotate the image by 180 degrees
transforms: []
# Precropping of source image. Should be an 3x1 or 3x2 array where n is the 
# number of dimensions. Values should be the percent of original size that 
# should be cut from the left and right (3x2) or both sides (3x1) along that 
# dimension. If no cropping, use array of zeros. Order of dimensions is (z,x,y).
# For multichannel images, cropping will be applied across all channels.
# Examples:
#     - (3x1): [[0.1], [0.25], [0.3]]
#     - (3x2): [[0.1, 0.15], [0.5, 0.20], [0.1, 0.1]]
source_crop: [[0,0],[0,0],[0,0]]
# Precropping of target image. Save conventions as for the source image.
target_crop: [[0,0],[0,0],[0,0]]
# Option to estimate an initial alignment in z. Improves performance if the
# starting alignment in the z-plane is expected to be very poor. Does not work 
# well with very noisy images or particulate structures
prealign_z: True
# Option to denoise both images prior to z-alignment by clipping pixel 
# intensities at the 10th and 90th percentiles
denoise_z: True
# Option to refine the final image alignment using itk. Recommended when the
# larger FOV image is the low-resolution modality
use_refinement: False
# Option to add padding to source and target images along the z-direction. Each 
# channel will be padded with layers of gaussian noise whose mean and standard 
# deviation are taken from the backgound of the channel as estimated through 
# Otsu thresholding. The output images will contain an extra channel which labels
# the content of the original images
pad_z: False
# The number of z-layers added to the top and bottom of the source and target 
# images
pad_size: 0

################################################################################
# Alignement Channel Options
################################################################################

# These options are only relevant if using multichannel images. Otherwise they
# should all be 0

# Alignment Channels #
# The channels which should be used to calculate alignment.
source_alignment_channel: 0
target_alignment_channel: 0

# Output Channels #
# The channels which the alignment should be applied to and saved
source_output_channel: 0
target_output_channel: 0